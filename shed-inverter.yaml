substitutions:
  name: ANENJI
  device_description: "Monitor and control a ISolar/EASUN SMG II inverter via RS232"
  tx_pin: GPIO16
  rx_pin: GPIO17

esphome:
  name: esp32-modbus
  friendly_name: ESP32_MODBUS

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  baud_rate: 0

# Enable Home Assistant API
api:
  encryption:
    key: "y1Yb274EvXSynWY/WgVMUwBN3pfQY3X2jlM+me3W9+0="

ota:
  - platform: esphome
    password: "5a56933694699f023fcde7ba720ceac2"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esp32-Modbus Fallback Hotspot"
    password: "xrOP6cbM8M6s"

captive_portal:

uart:
  - id: uart_0
    baud_rate: 9600
    tx_pin: ${tx_pin}
    rx_pin: ${rx_pin}

modbus:
  - id: modbus0
    uart_id: uart_0
    send_wait_time: 200ms

modbus_controller:
  - id: anj
    address: 0x01
    modbus_id: modbus0
    command_throttle: 200ms
    update_interval: 10s
    

time:
  - platform: sntp

sensor:
 # Eqipment Fault code                                            ULong 100 2 R
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Equipment Fault Code"
    address: 100
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 0

  # Eqipment Fault code                                            ULong 104 2 R
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Warning Code Unmasked Processing"
    address: 104
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 0

  # Warning Code After Shield Processing                          ULong 108 2 R
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Warning Code After Shield Processing"
    address: 108
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 0

  # Operation Mode                                                UInt  201 1 R 0: Power On
  #                                                                             1: Standby
  #                                                                             2: Mains
  #                                                                             3: Off-Grid
  #                                                                             4: Bypass
  #                                                                             5: Charging
  #                                                                             6: Fault
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Operation Mode ID"
    address: 201
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 0

  # Effective mains voltage                              0.1V     Int   202 1 R
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Input AC Voltage"
    address: 202
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  # Mains Frequency                                      0.01Hz   Int   203 1 R
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Input AC Frequency"
    address: 203
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "Hz"
    device_class: frequency
    state_class: measurement
    accuracy_decimals: 2
    filters:
      - multiply: 0.01

  # Average mains power                                  1W       Int   204 1 R
  - platform: modbus_controller
    modbus_controller_id: anj
    id: anj_input_ac_power
    name: "${name} Input AC Power"
    address: 204
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0

  # Effective inverter voltage                           0.1V     Int   205 1 R
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Output AC Voltage"
    address: 205
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  # Effective inverter current                           0.1A     Int   206 1 R
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Output AC Current"
    address: 206
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  # Inverter frequency                                   0.01Hz   Int   207 1 R
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Output AC Frequency"
    address: 207
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "Hz"
    device_class: frequency
    state_class: measurement
    accuracy_decimals: 2
    filters:
      - multiply: 0.01

  # Average inverter power                               1W       Int   208 1 R Positive numbers indicate inverter output, negative numbers indicate inverter input
  - platform: modbus_controller
    modbus_controller_id: anj
    id: anj_output_ac_power
    name: "${name} Output AC Power 08"
    address: 208
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0

  # Inverter charging power                              1W       Int   209 1 R
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Input AC Charging Power"
    address: 209
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0

  # Output effective voltage                             0.1V     Int   210 1 R
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Output AC Voltage"
    address: 210
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  # Output effective Current                             0.1A     Int   211 1 R
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Output AC Current"
    address: 211
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  # Output frequency                                     0.01Hz   Int   212 1 R
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Output AC Frequency"
    address: 212
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "Hz"
    device_class: frequency
    state_class: measurement
    accuracy_decimals: 2
    filters:
      - multiply: 0.01

  # Output active power                                  1W       Int   213 1 R
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Output AC Active Power"
    address: 213
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0

  # Output apparent power                                1VA      Int   214 1 R
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Output AC Apparent Power"
    address: 214
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "VA"
    device_class: apparent_power
    state_class: measurement
    accuracy_decimals: 0

  # Battery average voltage                              0.1V     Int   215 1 R
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Battery Voltage"
    address: 215
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  # Battery average Current                              0.1A     Int   216 1 R
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Battery Current"
    address: 216
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  # Battery average power                                1W       Int   217 1 R
  - platform: modbus_controller
    modbus_controller_id: anj
    id: anj_battery_average_power
    name: "${name} Battery Power"
    address: 217
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0

  # PV average voltage                                   0.1V     Int   219 1 R
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} PV Voltage"
    address: 219
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  # PV average current                                   0.1A     Int   220 1 R
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} PV Current"
    address: 220
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  # PV average power                                     1W       Int   223 1 R
  - platform: modbus_controller
    modbus_controller_id: anj
    id: anj_pv_average_power
    name: "${name} PV Power"
    address: 223
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0

  # PV charging average power                            1W       Int   224 1 R
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Charging Battery From PV"
    address: 224
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0

  # Load percentage                                      1%       Int   225 1 R
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Input AC Power Percent"
    address: 225
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "%"
    state_class: measurement
    accuracy_decimals: 0

  # DCDC Temperature                                     1°C      Int   226 1 R
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Inverter Temperature 1"
    address: 226
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "°C"
    device_class: temperature
    state_class: measurement
    accuracy_decimals: 0

  # Inverter                                  1°C      Int   227 1 R
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Inverter Temperature 2"
    address: 227
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "°C"
    device_class: temperature
    state_class: measurement
    accuracy_decimals: 0

  # Battery state of charge                              1%       UInt  229 1 R
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Battery State Of Charge"
    address: 229
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "%"
    device_class: battery
    state_class: measurement
    accuracy_decimals: 0

  # Power Flow Status                                 1%       UInt  231 1 R
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Power Flow Status"
    address: 231
    register_type: holding
    value_type: U_WORD
    device_class: battery
    state_class: measurement
    accuracy_decimals: 0

  # Battery average current                              0.1A     Int   232 1 R Positive number means charging, negative number means discharging
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Battery Current"
    address: 232
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  # Inverter charging average current                    0.1A     Int   233 1 R
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Battery Charge Current"
    address: 233
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  # PV charging average current                          0.1A     Int   234 1 R
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Average PV Charging Current"
    address: 234
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  # Rated power                                           W       Uint  643 1 R
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Maximum Power"
    address: 643
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "W"
    device_class: power
    # state_class: measurement
    accuracy_decimals: 0

  - platform: total_daily_energy
    name: "${name} Total Daily Energy PV"
    restore: true
    icon: mdi:counter
    power_id: anj_pv_average_power
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh

  - platform: total_daily_energy
    name: "${name} Total Daily Energy Battery"
    restore: true
    icon: mdi:counter
    power_id: anj_battery_average_power
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh

  - platform: total_daily_energy
    name: "${name} Total Daily Energy AC Out"
    restore: true
    icon: mdi:counter
    power_id: anj_output_ac_power
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh

  - platform: total_daily_energy
    name: "${name} Total Daily Energy AC In"
    restore: true
    icon: mdi:counter
    power_id: anj_input_ac_power
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh

select:
  # Output Mode                                                   Uint  300 1 R/W 0: Single, 1: Parallel, 2: 3 Phase-P1, 3: 3 Phase-P2, 4: 3 Phase-P3
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Output Mode Setting"
    use_write_multiple: true
    address: 300
    value_type: U_WORD
    optionsmap:
      "Single": 0
      "Parallel": 1
      "Phase P1": 2
      "Phase P2": 3
      "Phase P3": 4

  # Output priority                                               Uint  301 1 R/W 0: Utility-PV-Battery, 1: PV-Utility-Battery, 2: PV-Battery-Utility
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "01 ${name} Source Output Priority Setting"
    use_write_multiple: true
    address: 301
    value_type: U_WORD
    optionsmap:
      "(UTI) Utility-PV-Battery": 0
      "(SOL) PV-Utility-Battery": 1
      "(SBU) PV-Battery-Utility": 2
      "(SUB) PV-Utility-Battery": 3

  # Input voltage range                                           Uint  302 1 R/W 0: Wide range, 1: Narrow range
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "03 ${name} Input Voltage Range"
    use_write_multiple: true
    address: 302
    value_type: U_WORD
    optionsmap:
      "APL": 0
      "UPS": 1
      "GEN": 2

  - platform: modbus_controller
    modbus_controller_id: anj
    name: "18 ${name} Buzzer Mode"
    use_write_multiple: true
    address: 303
    value_type: U_WORD
    optionsmap:
      "Mute": 0
      "Input Source Changes": 1
      "Specific Warning or Fault": 2
      "Sound in Case Of Fault": 3

  # LCD Backlight                                         Uint  305 1 R/W 0: Wide range, 1: Narrow range
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "20 ${name} LCD Backlight"
    use_write_multiple: true
    address: 305
    value_type: U_WORD
    optionsmap:
      "Timed Closing": 0
      "Always On": 1

  - platform: modbus_controller
    modbus_controller_id: anj
    name: "05 ${name} Battery Type"
    use_write_multiple: true
    address: 322
    value_type: U_WORD
    optionsmap:
      "AGM": 0
      "FLD": 1
      "User": 2
      "LI1": 3 
      "LI2": 4
      "LI3": 5
      "LI4": 6 
      "LIB": 7
      "8": 8

  - platform: modbus_controller
    modbus_controller_id: anj
    name: "16 ${name} Battery Charging Priority"
    use_write_multiple: true
    address: 331
    value_type: U_WORD
    optionsmap:
      "Mains Supply is Preferred": 0
      "PV Priority": 1
      "PV is This same level as Mains Supply": 2
      "PV Charging Only Allowed": 3 

  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Automatic Mains Output Enable"
    use_write_multiple: true
    address: 338
    value_type: U_WORD
    optionsmap:
      "NO Mains Power Without Pressing The Power Button": 0
      "Automatic Mains Power Output without pressing the power button": 1

  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Boot Mode"
    use_write_multiple: true
    address: 406
    value_type: U_WORD
    optionsmap:
      "Can Be Powered On Locally Or Remotely": 0
      "Only local boot": 1
      "Remote boot only": 2

  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Exits The Fail Locked State"
    use_write_multiple: true
    address: 426
    value_type: U_WORD
    optionsmap: 
      "Stay": 0
      "Exit The Fault Lock State": 1

  - platform: modbus_controller
    modbus_controller_id: anj
    name: "19 ${name} LCD Automatically Returns To The Homepage Switch"
    use_write_multiple: true
    address: 306
    value_type: U_WORD
    optionsmap: 
      "Do not return automatically": 0
      "Automatically return after 1 minute": 1

  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Energy-Saving Mode Switch"
    use_write_multiple: true
    address: 307
    value_type: U_WORD
    optionsmap: 
      "Energy-saving mode is Off": 0
      "Energy-saving mode is On": 1
  

switch:
  # LCD automatically returns to the homepage                     Uint  306 1 R/W 0: Do not return automatically, 1: Automatically return after 1 minute
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "19 ${name} LCD Automatically Returns To The Homepage Switch"
    use_write_multiple: true
    address: 306
    register_type: holding
    bitmask: 1

  # Energy-saving mode                                            Uint  307 1 R/W 0: Energy-saving mode is off, 1: Energy-saving mode is on
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Energy-Saving Mode Switch"
    use_write_multiple: true
    address: 307
    register_type: holding
    bitmask: 1

  - platform: modbus_controller
    modbus_controller_id: anj
    name: "06 ${name} Overload Automatic Restart Switch"
    use_write_multiple: true
    address: 308
    register_type: holding
    bitmask: 1

  - platform: modbus_controller
    modbus_controller_id: anj
    name: "07 ${name} Over-Temperature Automatic Restart Switch"
    use_write_multiple: true
    address: 309
    register_type: holding
    bitmask: 1

  - platform: modbus_controller
    modbus_controller_id: anj
    name: "10 ${name} Overload Bypass Restart Switch"
    use_write_multiple: true
    address: 310
    register_type: holding
    bitmask: 1

  # Battery Eq mode is enabled                                    Uint  313 1 R/W 0: Disable, 1: Enable
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "33 ${name} Battery EQ Mode Is Enabled Switch"
    use_write_multiple: true
    address: 313
    register_type: holding
    bitmask: 1

  # Remote switch                                                 Uint  420 1 R/W 0: Remote shutdown, 1: Remote turn-on
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Remote Switch"
    use_write_multiple: true
    address: 420
    register_type: holding
    bitmask: 1

text_sensor:
  # Fault code                                                    ULong 100 2 R
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Fault"
    address: 100
    register_type: holding
    register_count: 2
    response_size: 4
    raw_encode: HEXBYTES
    lambda: |-
      static const uint8_t FAULTS_SIZE = 27;
      static const char *const FAULTS[FAULTS_SIZE] = {
          "Over temperature of inverter module",                     // 0000 0000 0000 0000 0000 0000 0000 0001 (1)
          "Over temperature of DCDC module",                         // 0000 0000 0000 0000 0000 0000 0000 0010 (2)
          "Battery over voltage",                                    // 0000 0000 0000 0000 0000 0000 0000 0100 (3)
          "PV module over temperature",                              // 0000 0000 0000 0000 0000 0000 0000 1000 (4)
          "Output short circuit",                                    // 0000 0000 0000 0000 0000 0000 0001 0000 (5)
          "Inverter over voltage",                                   // 0000 0000 0000 0000 0000 0000 0010 0000 (6)
          "Output over load",                                        // 0000 0000 0000 0000 0000 0000 0100 0000 (7)
          "Bus over voltage",                                        // 0000 0000 0000 0000 0000 0000 1000 0000 (8)
          "Bus soft start timed out",                                // 0000 0000 0000 0000 0000 0001 0000 0000 (9)
          "PV over current",                                         // 0000 0000 0000 0000 0000 0010 0000 0000 (10)
          "PV over voltage",                                         // 0000 0000 0000 0000 0000 0100 0000 0000 (11)
          "Battery over current",                                    // 0000 0000 0000 0000 0000 1000 0000 0000 (12)
          "Inverter over current",                                   // 0000 0000 0000 0000 0001 0000 0000 0000 (13)
          "Bus low voltage",                                         // 0000 0000 0000 0000 0010 0000 0000 0000 (14)
          "Reserve (Bit 15)",                                        // 0000 0000 0000 0000 0100 0000 0000 0000 (15)
          "Inverter DC component is too high",                       // 0000 0000 0000 0000 1000 0000 0000 0000 (16)
          "Reserve (Bit 17)",                                        // 0000 0000 0000 0001 0000 0000 0000 0000 (17)
          "The zero bias of output current is too large",            // 0000 0000 0000 0010 0000 0000 0000 0000 (18)
          "The zero bias of inverter current is too large",          // 0000 0000 0000 0100 0000 0000 0000 0000 (19)
          "The zero bias of battery current is too large",           // 0000 0000 0000 1000 0000 0000 0000 0000 (20)
          "The zero bias of PV current is too large",                // 0000 0000 0001 0000 0000 0000 0000 0000 (21)
          "Inverter low voltage",                                    // 0000 0000 0010 0000 0000 0000 0000 0000 (22)
          "Inverter negative power protection",                      // 0000 0000 0100 0000 0000 0000 0000 0000 (23)
          "The host in the parallel system is lost",                 // 0000 0000 1000 0000 0000 0000 0000 0000 (24)
          "Synchronization signal abnormal in the parallel system",  // 0000 0001 0000 0000 0000 0000 0000 0000 (25)
          "The battery type is incompatible",                        // 0000 0010 0000 0000 0000 0000 0000 0000 (26)
          "Parallel versions are incompatible",                      // 0000 0100 0000 0000 0000 0000 0000 0000 (27)
      };
      std::string values = "";

      uint32_t mask = modbus_controller::dword_from_hex_str(x, 0);
      if (mask) {
        for (int i = 0; i < FAULTS_SIZE; i++) {
          if (mask & (1 << i)) {
            values.append(FAULTS[i]);
            values.append(";");
          }
        }
        if (!values.empty()) {
          values.pop_back();
        }
      }
      return values;

  # Warning code                                                  ULong 108 2 R
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Warning"
    address: 108
    register_type: holding
    register_count: 2
    response_size: 4
    raw_encode: HEXBYTES
    lambda: |-
      static const uint8_t WARNINGS_SIZE = 19;
      static const char *const WARNINGS[WARNINGS_SIZE] = {
          "Reserve (Bit 0)",                                             // 0000 0000 0000 0000 0000 0000 0000 0001 (1)
          "Mains waveform abnormal",                                     // 0000 0000 0000 0000 0000 0000 0000 0010 (2)
          "Reserve (Bit 2)",                                             // 0000 0000 0000 0000 0000 0000 0000 0100 (3)
          "Mains low voltage",                                           // 0000 0000 0000 0000 0000 0000 0000 1000 (4)
          "Mains over frequency",                                        // 0000 0000 0000 0000 0000 0000 0001 0000 (5)
          "Mains low frequency",                                         // 0000 0000 0000 0000 0000 0000 0010 0000 (6)
          "PV low voltage",                                              // 0000 0000 0000 0000 0000 0000 0100 0000 (7)
          "Over temperature",                                            // 0000 0000 0000 0000 0000 0000 1000 0000 (8)
          "Battery low voltage",                                         // 0000 0000 0000 0000 0000 0001 0000 0000 (9)
          "Battery is not connected",                                    // 0000 0000 0000 0000 0000 0010 0000 0000 (10)
          "Overload",                                                    // 0000 0000 0000 0000 0000 0100 0000 0000 (11)
          "Battery Eq charging",                                         // 0000 0000 0000 0000 0000 1000 0000 0000 (12)
          "Battery undervoltage",                                        // 0000 0000 0000 0000 0001 0000 0000 0000 (13)
          "Output power derating",                                       // 0000 0000 0000 0000 0010 0000 0000 0000 (14)
          "Fan blocked",                                                 // 0000 0000 0000 0000 0100 0000 0000 0000 (15)
          "PV energy is too low to be use",                              // 0000 0000 0000 0000 1000 0000 0000 0000 (16)
          "Parallel communication interrupted",                          // 0000 0000 0000 0001 0000 0000 0000 0000 (17)
          "Output mode of Single and Parallel systems inconsistent",     // 0000 0000 0000 0010 0000 0000 0000 0000 (18)
          "Battery voltage difference of parallel system is too large",  // 0000 0000 0000 0100 0000 0000 0000 0000 (19)
      };
      std::string values = "";

      uint32_t mask = modbus_controller::dword_from_hex_str(x, 0);
      if (mask) {
        for (int i = 0; i < WARNINGS_SIZE; i++) {
          if (mask & (1 << i)) {
            values.append(WARNINGS[i]);
            values.append(";");
          }
        }
        if (!values.empty()) {
          values.pop_back();
        }
      }
      return values;

  # Operation Mode                                                UInt  201 1 R 0: Power On, 1: Standby, 2: Mains, 3: Off-Grid, 4: Bypass, 5: Charging, 6: Fault
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Operation Mode"
    address: 201
    register_type: holding
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0: return std::string("Power On");
        case 1: return std::string("Standby");
        case 2: return std::string("Mains");
        case 3: return std::string("Off-Grid");
        case 4: return std::string("Bypass");
        case 5: return std::string("Charging");
        case 6: return std::string("Fault");
      }
      return std::string("Unknown");

number:
  # Output voltage                                                0.1V    Uint  320 1 R/W
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "08 ${name} Output Voltage Setting"
    use_write_multiple: true
    address: 320
    register_type: holding
    value_type: U_WORD
    #min_value: 220.0
    max_value: 240.0
    step: 0.1
    unit_of_measurement: "V"
    lambda: "return x * 0.1f;"
    write_lambda: |-
      return x * 10.0f;

  # Output frequency setting                                      0.01Hz  Uint  321 1 R/W
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "09 ${name} Output Frequency Setting"
    use_write_multiple: true
    address: 321
    register_type: holding
    value_type: U_WORD
    min_value: 50.0
    # max_value: 60.0
    step: 0.1
    unit_of_measurement: "Hz"
    lambda: "return x * 0.01f;"
    write_lambda: |-
      return x * 100.0f;

  # Battery overvoltage protection point                          0.1V    Uint  323 1 R/W
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "34 ${name} Battery Overvoltage Protection Point Setting"
    use_write_multiple: true
    address: 323
    register_type: holding
    value_type: U_WORD
    min_value: 0.0
    # max_value: 100.0
    step: 0.1
    unit_of_measurement: "V"
    lambda: "return x * 0.1f;"
    write_lambda: |-
      return x * 10.0f;

  # Max charging voltage                                          0.1V    Uint  324 1 R/W
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "26 ${name} Max Charging Voltage Setting"
    use_write_multiple: true
    address: 324
    register_type: holding
    value_type: U_WORD
    min_value: 0.0
    max_value: 100.0
    step: 0.1
    unit_of_measurement: "V"
    lambda: "return x * 0.1f;"
    write_lambda: |-
      return x * 10.0f;

  # Floating charging voltage                                     0.1V    Uint  325 1 R/W
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "27 ${name} Floating Charging Voltage Setting"
    use_write_multiple: true
    address: 325
    register_type: holding
    value_type: U_WORD
    min_value: 0.0
    # max_value: 100.0
    step: 0.1
    unit_of_measurement: "V"
    lambda: "return x * 0.1f;"
    write_lambda: |-
      return x * 10.0f;

  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Mains Mode Battery Discharge Recovery Point"
    use_write_multiple: true
    address: 326
    register_type: holding
    value_type: U_WORD
    min_value: 0.0
    # max_value: 100.0
    step: 0.1
    unit_of_measurement: "V"
    lambda: "return x * 0.1f;"
    write_lambda: |-
      return x * 10.0f;

  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Battery Low Voltage Protection Point In Mains Mode"
    use_write_multiple: true
    address: 327
    register_type: holding
    value_type: U_WORD
    min_value: 0.0
    # max_value: 100.0
    step: 0.1
    unit_of_measurement: "V"
    lambda: "return x * 0.1f;"
    write_lambda: |-
      return x * 10.0f;

  - platform: modbus_controller
    modbus_controller_id: anj
    name: "29 ${name} Off Grid Mode Battery Low Voltage Protection Point"
    use_write_multiple: true
    address: 329
    register_type: holding
    value_type: U_WORD
    min_value: 0.0
    # max_value: 100.0
    step: 0.1
    unit_of_measurement: "V"
    lambda: "return x * 0.1f;"
    write_lambda: |-
      return x * 10.0f;

  - platform: modbus_controller
    modbus_controller_id: anj
    name: "${name} Warning Time From Constant Voltage to Floatinf Charge"
    use_write_multiple: true
    address: 330
    register_type: holding
    value_type: U_WORD
    min_value: 0.0
    # max_value: 100.0
    step: 0.1
    unit_of_measurement: "V"
    lambda: "return x * 0.1f;"
    write_lambda: |-
      return x * 10.0f;

  - platform: modbus_controller
    modbus_controller_id: anj
    name: "02 ${name} Maximum Charge Current"
    use_write_multiple: true
    address: 332
    register_type: holding
    value_type: U_WORD
    min_value: 10.0
    max_value: 80.0
    step: 0.1
    unit_of_measurement: "A"
    lambda: "return x * 0.1f;"
    write_lambda: |-
      return x * 10.0f;

  - platform: modbus_controller
    modbus_controller_id: anj
    name: "11 ${name} Maximum Mains Charging Current"
    use_write_multiple: true
    address: 333
    register_type: holding
    value_type: U_WORD
    min_value: 0.0
    max_value: 80.0
    step: 0.1
    unit_of_measurement: "A"
    lambda: "return x * 0.1f;"
    write_lambda: |-
      return x * 10.0f;

  - platform: modbus_controller
    modbus_controller_id: anj
    name: "35 ${name} Battery Equalization Time"
    use_write_multiple: true
    address: 335
    register_type: holding
    value_type: U_WORD
    min_value: 0.0
    max_value: 90.0
    step: 0.1
    unit_of_measurement: "min"

  # Battery Equalization Timeout                                     min     Uint  336 1 R/W Range: 0~900
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "36 ${name} Battery Equalization Timeout"
    use_write_multiple: true
    address: 336
    register_type: holding
    value_type: U_WORD
    min_value: 0.0
    max_value: 900.0
    step: 0.1
    unit_of_measurement: "min"

  # Two equalization charging intervals                           day     Uint  337 1 R/W Range: 1~90
  - platform: modbus_controller
    modbus_controller_id: anj
    name: "37 ${name} Two Equalization Charging Intervals"
    use_write_multiple: true
    address: 337
    register_type: holding
    value_type: U_WORD
    min_value: 0.0
    max_value: 90.0
    step: 0.1
    unit_of_measurement: "day"

  - platform: modbus_controller
    modbus_controller_id: anj
    name: "43 ${name} Mains Mode Battery Discharge SOC Protection Value"
    use_write_multiple: true
    address: 341
    register_type: holding
    value_type: U_WORD
    min_value: 20.0
    max_value: 50.0
    step: 1
    unit_of_measurement: "%"

  - platform: modbus_controller
    modbus_controller_id: anj
    name: "44 ${name} Mains Mode Battery Discharge SOC Recovery Value"
    use_write_multiple: true
    address: 342
    register_type: holding
    value_type: U_WORD
    min_value: 60.0
    max_value: 100.0
    step: 1
    unit_of_measurement: "%"

  - platform: modbus_controller
    modbus_controller_id: anj
    name: "45 ${name} Battery Discharge SOC Protection Value In Off-Grid mode"
    use_write_multiple: true
    address: 343
    register_type: holding
    value_type: U_WORD
    min_value: 3.0
    max_value: 30.0
    step: 1
    unit_of_measurement: "%"

  - platform: modbus_controller
    modbus_controller_id: anj
    name: "46 ${name} Maximum Discharge Current Protection"
    use_write_multiple: true
    address: 351
    register_type: holding
    value_type: U_WORD
    min_value: 10.0
    max_value: 150.0
    step: 0.1
    unit_of_measurement: "A"

# Button entities

web_server:
  port: 80
